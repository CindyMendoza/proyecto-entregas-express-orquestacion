version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  mongodb:
    image: mongo:5.0.27
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  redis:
    image: redis:7.2.5-alpine
    container_name: redis
    ports:
      - "6379:6379"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry

  shipping-ops-producer:
    build:
      context: ./shipping-ops-producer
    container_name: shipping-ops-producer
    depends_on:
      - kafka
      - redis
      - schema-registry
    ports:
      - "8087:8087"
    environment:
      SERVER_PORT: 8087
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis

  dispatch-orchestrator-consumer:
    build:
      context: ./dispatch-orchestrator-consumer
    container_name: dispatch-orchestrator-consumer
    depends_on:
      - kafka
      - mongodb
      - redis
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      SERVER_PORT: 8088
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_REDIS_HOST: redis

volumes:
  mongo-data: {}